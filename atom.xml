<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lwz7512.github.io/"/>
  <updated>2018-06-26T15:11:13.000Z</updated>
  <id>https://lwz7512.github.io/</id>
  
  <author>
    <name>Li Wenzhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Adding Navigation Screen to ignite project</title>
    <link href="https://lwz7512.github.io/2018/06/26/Adding-Navigation-Screen-to-ignite-project/"/>
    <id>https://lwz7512.github.io/2018/06/26/Adding-Navigation-Screen-to-ignite-project/</id>
    <published>2018-06-26T13:50:03.000Z</published>
    <updated>2018-06-26T15:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>The first time of usage of ignite cli and boilerplate are early May. As I was a beginner of RN and it seemed too complex for me at that time, so I gave up. But after a complete zero to release building of my first RNC, I’m familiar with the work flow and the project structure than ever. So, today I went back the iginite project and did some experiments in it. The biggest gain in this exercise is the usage of <code>react-navigation</code> and <code>react-native-navbar</code>.</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>first install iginite cli:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g ignite-cli</span><br></pre></td></tr></table></figure><p>then create a iginite based react-native app:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ignite new PizzaApp</span><br></pre></td></tr></table></figure><blockquote><p>Choose Andross when prompted, react-native-vector-icons needed also<br>DevScreens is not required here</p></blockquote><p>Default PizzaApp has only one screen <code>LaunchScreen</code>, but I want to add another screen, and implement navigation from LaunchScreen to new screen.</p><p>create new screen with cli:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ignite generate screen PizzaLocationList</span><br></pre></td></tr></table></figure><p>then, two file appeared in project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PizzaApp/App/Containers/PizzaLocationListScreen.js</span><br><span class="line">PizzaApp/App/Containers/Styles/PizzaLocationListScreenStyle.js</span><br></pre></td></tr></table></figure><p>one file modified:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PizzaApp/App/Navigation/AppNavigation.js</span><br></pre></td></tr></table></figure><p>added a new line in StackNavigator:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PizzaLocationListScreen: &#123; screen: PizzaLocationListScreen &#125;,</span><br></pre></td></tr></table></figure><p>this defined a new router path, the name is <code>PizzaLocationListScreen</code>.</p><p>Now, time to add navigation button in LaunchScreen, add belowing into the ScrollView of LaunchScreen rendered view:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">  title=&quot;Go to Pizza List&quot;</span><br><span class="line">  onPress=&#123;() =&gt; this.props.navigation.navigate(&apos;PizzaLocationListScreen&apos;)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>see that? the name in navigate() is new router name we have defined.</p><p>Now, let’s run it to see what will happen…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-ios</span><br></pre></td></tr></table></figure><p>when we press the button <code>Go to Pizza List</code>, forward new screen, but….. CAN NOT GO BACK !!!</p><p>How to do with?</p><p>Adding a navigation bar certainly.</p><p>install <code>react-native-navbar</code> by :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-native-navbar</span><br></pre></td></tr></table></figure><p>then import to <code>PizzaLocationListScreen</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import NavigationBar from &apos;react-native-navbar&apos;;</span><br></pre></td></tr></table></figure><p>adding this component into rendered view of PizzaLocationListScreen:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;styles.mainContainer&#125;&gt;</span><br><span class="line">  &lt;NavigationBar</span><br><span class="line">    title=&#123;titleConfig&#125;</span><br><span class="line">    leftButton=&#123;backIconBtn&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;ScrollView style=&#123;styles.container&#125;&gt;</span><br><span class="line">    &lt;KeyboardAvoidingView behavior=&apos;position&apos;&gt;</span><br><span class="line">      &lt;Text&gt;PizzaLocationListScreen&lt;/Text&gt;</span><br><span class="line">    &lt;/KeyboardAvoidingView&gt;</span><br><span class="line">  &lt;/ScrollView&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>ok, that’s the go back NavigationBar customed by <code>titleConfig</code> and <code>backIconBtn</code> element.</p><h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><p><img src="/img/ignite_nav.png" alt="ignite-navigation"></p><h3 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h3><p><a href="https://github.com/lwz7512/PizzaApp" target="_blank" rel="noopener">is here</a></p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;The first time of usage of ignite cli 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My First RNA AwesomeNote4Kids Released!</title>
    <link href="https://lwz7512.github.io/2018/06/14/My-First-RNA-AwesomeNote4Kids-Released/"/>
    <id>https://lwz7512.github.io/2018/06/14/My-First-RNA-AwesomeNote4Kids-Released/</id>
    <published>2018-06-13T16:51:14.000Z</published>
    <updated>2018-06-19T08:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Long time no writing something, for I’m crazy in immigration application…</p><p>Finally, the first phase applying materails has been submitted at 8 Jun. After couples of days redeveloping my first react-native app, AwesomeNote4Kids, released at last today!</p><h3 id="repository-address"><a href="#repository-address" class="headerlink" title="repository address"></a>repository address</h3><p><a href="https://github.com/lwz7512/AwesomeNote4Kids" target="_blank" rel="noopener">https://github.com/lwz7512/AwesomeNote4Kids</a></p><h3 id="screenshots"><a href="#screenshots" class="headerlink" title="screenshots"></a>screenshots</h3><p><img src="/img/screenshots.png" alt=""></p><h3 id="modules-used"><a href="#modules-used" class="headerlink" title="modules used"></a>modules used</h3><ul><li>“react-native-audio”: “^4.1.3”,</li><li>“react-native-canvas”: “^0.1.21”,</li><li>“react-native-fs”: “^2.9.12”,</li><li>“react-native-snap-carousel”: “^3.7.0”,</li><li>“react-native-sound”: “^0.10.9”,</li><li>“react-native-splash-screen”: “^3.0.9”,</li><li>“react-native-vector-icons”: “^4.6.0”,</li><li>“react-redux”: “^5.0.7”,</li><li>“redux”: “^4.0.0”,</li><li>“redux-persist”: “^5.9.1”,</li><li>“tcomb-form-native”: “^0.6.11”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Long time no writing something, for I’m crazy in immigration application…&lt;/p&gt;
&lt;p&gt;Finally, the first phase applying materails has been sub
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rebuild an ionic based git repository</title>
    <link href="https://lwz7512.github.io/2018/05/10/Rebuild-an-ionic-based-git-repository/"/>
    <id>https://lwz7512.github.io/2018/05/10/Rebuild-an-ionic-based-git-repository/</id>
    <published>2018-05-10T06:41:35.000Z</published>
    <updated>2018-05-10T11:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Yesterday my colleague submitted an ionic project to github, my task is to use the repository to package a Android &amp; ios installation file.  But after I cloned the repository, running <code>cordova prepare</code> in console, it reported:</p><blockquote><p>Error: Current working directory is not a Cordova-based project.</p></blockquote><p>what?</p><p>I searched many results and tried the solutions, but still the same error! I had to figure out what’s the difference of this repository and the blank new ionic2 project.</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>to create a blank new ionic2 project, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic start blanknewio2 --v2 --ts</span><br></pre></td></tr></table></figure><p>Compared with the local blank new ionic2 project, cloned project missed a <code>www</code> directory:</p><p><img src="/img/ionic2.png" alt=""></p><p>The answer is clear now, www directory is ignored and not committed! By checking the <code>.gitignore</code> file in both projects, <code>www/</code> is included in without any unexpected.</p><p>So, mannually create a www directory then rerun the installation commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir www</span><br><span class="line">$ cordova prepare</span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure><p>now, it’s ready to build ionic app source to each platform :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ionic build android --prod</span><br><span class="line">$ ionic build ios --prod</span><br></pre></td></tr></table></figure><p>DONE!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Yesterday my colleague submitted an io
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The right way to run react native audio example successfully</title>
    <link href="https://lwz7512.github.io/2018/05/09/The-right-way-to-run-react-native-audio-example-successfully/"/>
    <id>https://lwz7512.github.io/2018/05/09/The-right-way-to-run-react-native-audio-example-successfully/</id>
    <published>2018-05-09T02:29:46.000Z</published>
    <updated>2018-05-09T04:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In my recent side RNA project ‘AwesomeNote4Kids’, I need to add a recording voice feature into it. Then <a href="https://github.com/jsierles/react-native-audio" target="_blank" rel="noopener">react-native-audio</a> module came to my viewport, it looks like a good option worthy of a try.</p><p>But after cloning the repository and installation of dependencies of AudioExample, I failed to successfully run the example in my Android phone, even if react-native link command executed. The Metro Bundler console reported  error:bundling failed: Error: Unable to resolve module <code>react</code> …</p><p>The console gave the issue and resolve steps, I tried them several times, but still not worked. So, I have to stop and find a way out of this circumstance. May be a wholly new react native project worked?</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>first to init a new RN project by:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native init AudioExample</span><br></pre></td></tr></table></figure><p>add two modules in dependencies to package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;react-native-audio&quot;: &quot;^4.1.3&quot;,</span><br><span class="line">&quot;react-native-sound&quot;: &quot;^0.10.9&quot;</span><br></pre></td></tr></table></figure><p>then install them:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd AudioExample</span><br><span class="line">$ npm i</span><br></pre></td></tr></table></figure><p>last but not at least, link the native code to the two platform build:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native link</span><br></pre></td></tr></table></figure><p>By now, the project is ready to run smoothly, all we need to do is migrating the react-native-audio/AudioExample/<code>AudioExample.js</code> to <code>App.js</code>.</p><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p>the complete <code>App.js</code> code is <a href="https://github.com/lwz7512/AudioExample/blob/master/App.js" target="_blank" rel="noopener">here</a></p><p>After adding the permission to platform build, we can successfully run the project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-android</span><br></pre></td></tr></table></figure><p>complete project source code is <a href="https://github.com/lwz7512/AudioExample" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;In my recent side RNA project ‘Awesome
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Refactoring reducer function to remove switch and case flow</title>
    <link href="https://lwz7512.github.io/2018/05/07/Refactoring-reducer-function-to-remove-switch-and-case-flow/"/>
    <id>https://lwz7512.github.io/2018/05/07/Refactoring-reducer-function-to-remove-switch-and-case-flow/</id>
    <published>2018-05-07T05:45:08.000Z</published>
    <updated>2018-05-07T09:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Redux introduces reducer function to handle each action, and return new state data. It’s a common usage to write a switch(action.type)/case workflow to process different action. This kind of measure leads to a very long and large reducer function, and mix all the scenarios together.</p><p>It’s so ugly to accept, difficult to read and maintain. How to change this? In this post we’ll simplify the reducer logic, and use as little code as possible to make it feel comfortable.</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>First, we define a struct names types which include all the action names:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const types = &#123;</span><br><span class="line">  ADD_ITEM: &apos;ADD&apos;,</span><br><span class="line">  UPDATE_ITEM: &apos;UPDATE&apos;,</span><br><span class="line">  SWITCH_ITEM: &apos;SWITCH&apos;,</span><br><span class="line">  REMOVE_ITEM: &apos;REMOVE&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>These constants definition is in global scope, defined once and referenced everywhere. we’ll use them later in handler and reducer functions.</p><p>A typical reducer function use switch/case flow control to calculate new state by action. Any solution not to use switch sentence? Definitely! The answer is a <strong> map object </strong> like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let handlers = &#123;</span><br><span class="line">  [types.ADD_ITEM]:    hander_ADD,</span><br><span class="line">  [types.UPDATE_ITEM]: hander_UPDATE,</span><br><span class="line">  [types.SWITCH_ITEM]: hander_SWITCH,</span><br><span class="line">  [types.REMOVE_ITEM]: hander_REMOVE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Compared with switch/case approach, is this implementation much easier to read? The greatest benefit of it is the action process is seperated from reducer, and redefined to a handler_xxx function.</p><p>Then, another problem come up, how to handler default action which’s the initial state? The answer is just simple as well:</p><p>check existing action first, if not meet the action then return initial state!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const _reducer = (state = initialState(), action) =&gt; &#123;</span><br><span class="line">  let at = action.type;</span><br><span class="line">  let handlers = &#123;</span><br><span class="line">    [types.ADD_ITEM]:    hander_ADD,</span><br><span class="line">    [types.UPDATE_ITEM]: hander_UPDATE,</span><br><span class="line">    [types.SWITCH_ITEM]: hander_SWITCH,</span><br><span class="line">    [types.REMOVE_ITEM]: hander_REMOVE</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  if(handlers[at]) return handlers[at](state, action);</span><br><span class="line"></span><br><span class="line">  return state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> A sample handler function like this:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const hander_REMOVE = (state, action) =&gt; &#123;</span><br><span class="line">  const &#123;notes, index&#125; = state;</span><br><span class="line">  const &#123;type, payload&#125; = action; // from actionCreators</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    notes: notes.filter((note, i) =&gt; i !== payload),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Everything looks perfect! we achieved the goal of seperation of concern points.</p><p>the complete Redux.js code is <a href="https://github.com/lwz7512/AwesomeNote4Kids/blob/master/app/Redux.js" target="_blank" rel="noopener">here</a>!</p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Redux introduces reducer function to h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Create form with tcomb-form-native</title>
    <link href="https://lwz7512.github.io/2018/05/04/Create-form-with-tcomb-form-native/"/>
    <id>https://lwz7512.github.io/2018/05/04/Create-form-with-tcomb-form-native/</id>
    <published>2018-05-04T13:11:38.000Z</published>
    <updated>2018-05-04T15:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>HTML element has built-in form component , but no corresponding part for react-native. So, we have to do some additional work wrapping some basic component to create a form component. Then, some of excellent third part form components won the developers’ star in reactjs community. One of the best is <strong> <a href="https://github.com/gcanti/tcomb-form-native" target="_blank" rel="noopener">tcomb-form-native</a> </strong> . Today, we’ll use this component to create a simple form, and display it in a popup modal.</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>install the form component module is just as simple as the below command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install tcomb-form-native --save</span><br></pre></td></tr></table></figure><p>after installation, the two module included in package.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;redux-persist&quot;: &quot;^5.9.1&quot;,</span><br><span class="line">&quot;tcomb-form-native&quot;: &quot;^0.6.11&quot;</span><br></pre></td></tr></table></figure><p>In the Example section of the tcomb-form-native README.md, it use require function to reference the library, but we can also use ES6 <strong> import </strong> for uniformity to other basic react-native component import.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// var t = require(&apos;tcomb-form-native&apos;);</span><br><span class="line">import t from &apos;tcomb-form-native&apos;;</span><br></pre></td></tr></table></figure><p>After that, we have a Form <strong> Class </strong> from the t:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Form = t.form.Form;</span><br></pre></td></tr></table></figure><p>Now, we are ready to create a real Form instance by combining three parts:</p><ul><li>domain model, a struct to define your form fields;</li><li>form options, an object to define the relevant visual/invisible attributes about fields;</li><li>Form tag, the visual part returned in render function;</li></ul><p>the complete implementation code like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var Card = t.struct(&#123;</span><br><span class="line">  big: t.String,              // a required string</span><br><span class="line">  title: t.maybe(t.String),  // an optional string</span><br><span class="line">  subtitle: t.maybe(t.String),  // an optional string</span><br><span class="line">  // age: t.Number,               // a required number</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var options = &#123;</span><br><span class="line">  fields: &#123;</span><br><span class="line">    big: &#123;</span><br><span class="line">      label: &apos;词汇&apos;, // &lt;= label for the name field</span><br><span class="line">      placeholder: &apos;填写你要记忆的词汇&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line">      label: &apos;解释&apos;,</span><br><span class="line">      placeholder: &apos;填写对该词汇的解释&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    subtitle: &#123;</span><br><span class="line">      label: &apos;举例&apos;,</span><br><span class="line">      placeholder: &apos;对该词汇造句或者相关词汇&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; // optional rendering options (see documentation)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;Form</span><br><span class="line">  ref=&quot;form&quot;</span><br><span class="line">  type=&#123;Card&#125;</span><br><span class="line">  options=&#123;options&#125;</span><br><span class="line">  value=&#123;this.state.value&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>what does it look like? here it is:</p><p><img src="/img/form.png" alt=""></p><p>the end result of the component source code is in <a href="https://github.com/lwz7512/AwesomeNote4Kids/blob/master/app/components/ModalForm.js" target="_blank" rel="noopener">here</a>!</p><p>next post we’ll figure out how to dynamically create a popup form rather than defined in the root view of app component.</p><p>coming soon…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;HTML element has built-in form compone
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add custom font to react native project</title>
    <link href="https://lwz7512.github.io/2018/04/29/Add-custom-font-to-react-native-project/"/>
    <id>https://lwz7512.github.io/2018/04/29/Add-custom-font-to-react-native-project/</id>
    <published>2018-04-29T10:23:50.000Z</published>
    <updated>2018-04-29T12:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In a recent RN project I’m working on, I need to display a handwriting chinese text in each card. But the default font library can not meet this demand, then, I searched a lot of reference and successfully completed it. It may look like complex, but the key steps are just a few, no much additional tricky parts!</p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>Here, My sole mission is to install a font file named <strong> ‘SentyMARUKO.ttf’ </strong> to my project.</p><p><img src="/img/SentyMARUKO.png" alt=""></p><p>to test the rightness, add the style definition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bigText: &#123;</span><br><span class="line">    color: &apos;#FFFFFF&apos;,</span><br><span class="line">    fontSize: 64,</span><br><span class="line">    fontFamily: &apos;SentyMARUKO&apos;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>then begin to change RN project:</p><ul><li>Step 1</li></ul><p>make a folder named ‘fonts’ in project-root/app, to hold the SentyMARUKO.ttf</p><ul><li>Step 2</li></ul><p>add below json snippt to package.json file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;rnpm&quot;: &#123;</span><br><span class="line">    &quot;assets&quot;: [&quot;./app/fonts&quot;]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>Step 3</li></ul><p>before run link command to install assets to ios/android project, install global rnpm first:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install rnpm -g</span><br><span class="line">$ rnpm link</span><br></pre></td></tr></table></figure><p>is it done? press CMD+r to see what’ll happen….</p><p><img src="/img/unrecognized_font.png" alt=""></p><p>Apparently not finished yet! The font resource installed to project but NOT automaticlly compiled to the running app. So, <strong> Unrecognized font family …</strong> error reported!</p><ul><li>Step 4</li></ul><p>recomplie the project by running:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-ios</span><br></pre></td></tr></table></figure><p>Note:</p><blockquote><p>KEEP dev server running background, do NOT close the console</p></blockquote><p>this step ends up finishing the whole process of adding custom font to react native project.</p><p>Text with ‘SentyMARUKO’ font like this:</p><p><img src="/img/note4kids_kong.png" alt=""></p><p>Compared with the original default Text font, look like much better?</p><p><img src="/img/kong_default.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;In a recent RN project I’m working on,
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Adding Redux to react-native project Part 2</title>
    <link href="https://lwz7512.github.io/2018/04/17/Adding-Redux-to-react-native-project-Part-2/"/>
    <id>https://lwz7512.github.io/2018/04/17/Adding-Redux-to-react-native-project-Part-2/</id>
    <published>2018-04-17T02:13:21.000Z</published>
    <updated>2018-04-17T03:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Last post we introduced Redux to a blank react-native project primarily. In this post we’ll add Redux to a TODO list app, and also to implement a persistence feature to save added TODO item.</p><p>We borrow a well-written <a href="http://www.reactnativeexpress.com/data_component_state" target="_blank" rel="noopener">TODO list app</a> as a starting point, in this way we’ll save a lot of energy to understand the mechanism of Redux.</p><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>To start refactoring, first we need to install Redux and redux-persist dependencies.</p><p>Adding belowing modules into package.json dependencies:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;react-redux&quot;: &quot;^5.0.7&quot;,</span><br><span class="line">&quot;redux&quot;: &quot;^3.7.2&quot;,</span><br><span class="line">&quot;redux-persist&quot;: &quot;^5.9.1&quot;</span><br></pre></td></tr></table></figure><p>instead installation one by one, this time we install all in one command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><ul><li>Change index.js, add Redux, persistence, App component wrapper :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123; PersistGate &#125; from &apos;redux-persist/integration/react&apos;</span><br><span class="line"></span><br><span class="line">import App from &apos;./app/App&apos;;</span><br><span class="line">import configureStore from &apos;./app/Redux&apos;;</span><br><span class="line"></span><br><span class="line">const &#123; store, persistor &#125; = configureStore();</span><br><span class="line"></span><br><span class="line">export default class Bootstrap extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt;</span><br><span class="line">                    &lt;App/&gt;</span><br><span class="line">                &lt;/PersistGate&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(&apos;AwesomeProject2&apos;, () =&gt; Bootstrap);</span><br></pre></td></tr></table></figure><p>Last post we explained the reason why using Provider outside of App. This example we added a NEW <strong> PersistGate </strong> to wrap App, enable it to automaticlly save the state to device. The persistor is a new stuff introduced later.</p><ul><li>Change App.js, connect component to Redux, deliver data by dispatch action :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; actionCreators &#125; from &apos;./Redux&apos;</span><br><span class="line"></span><br><span class="line">onAddTodo = (text) =&gt; &#123;</span><br><span class="line">  // const &#123;todos&#125; = this.state</span><br><span class="line">  // this.setState(&#123;</span><br><span class="line">  //   todos: [text, ...todos],</span><br><span class="line">  // &#125;)</span><br><span class="line"></span><br><span class="line">  this.props.dispatch(actionCreators.add(text))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onRemoveTodo = (index) =&gt; &#123;</span><br><span class="line">  // const &#123;todos&#125; = this.state</span><br><span class="line">  // this.setState(&#123;</span><br><span class="line">  //   todos: todos.filter((todo, i) =&gt; i !== index),</span><br><span class="line">  // &#125;)</span><br><span class="line"></span><br><span class="line">  this.props.dispatch(actionCreators.remove(index))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you have seen, the big changes to this component is the way it process data, rather than using setState it use <strong> props.dispatch() </strong> . Where doest it come? The answer is in connect function:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// inject app state from redux, then add new property todos to App component</span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; (&#123;</span><br><span class="line">  todos: state.todos,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Wrap App component with Connect component,</span><br><span class="line">// and create interaction channel(props) for it.</span><br><span class="line">const AppContainer = connect(</span><br><span class="line">  mapStateToProps</span><br><span class="line">)(App);</span><br></pre></td></tr></table></figure></p><p>in mapStateToProps function App component obtained a new property named ‘todos’, how to use it?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  // const &#123;todos&#125; = this.state</span><br><span class="line">  const &#123;todos&#125; = this.props</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Title&gt;</span><br><span class="line">        To-Do List</span><br><span class="line">      &lt;/Title&gt;</span><br><span class="line">      &lt;Input</span><br><span class="line">        placeholder=&#123;&apos;Type a todo, then hit enter!&apos;&#125;</span><br><span class="line">        onSubmitEditing=&#123;this.onAddTodo&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;List</span><br><span class="line">        list=&#123;todos&#125;</span><br><span class="line">        onPressItem=&#123;this.onRemoveTodo&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Again, we don’t use state anymore, using <strong> props </strong> instead!</p><ul><li>last, we have a look at new Redux.js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Initial state of the store</span><br><span class="line">const initialState = &#123;</span><br><span class="line">    todos: [&apos;Click to remove&apos;, &apos;Learn React Native&apos;, &apos;Write Code&apos;, &apos;Ship App&apos;],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Helper functions to dispatch actions, optionally with payloads</span><br><span class="line">export const actionCreators = &#123;</span><br><span class="line">    add: (item) =&gt; &#123;</span><br><span class="line">      return &#123;type: &apos;ADD&apos;, payload: item&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: (index) =&gt; &#123;</span><br><span class="line">      return &#123;type: &apos;REMOVE&apos;, payload: index&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We seperate app state/data into Redux, so, initial data moved to here from App.js. Also, actions definded here for simplification.</p><p>last but not at least is the store creation function:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const _reducer = (state = initialState, action) =&gt; &#123;</span><br><span class="line">    // console.log(state);</span><br><span class="line"></span><br><span class="line">    const &#123;todos&#125; = state;</span><br><span class="line">    const &#123;type, payload&#125; = action;</span><br><span class="line"></span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;ADD&apos;:</span><br><span class="line">        return &#123;</span><br><span class="line">            todos: [payload, ...todos],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        case &apos;REMOVE&apos;:</span><br><span class="line">        return &#123;</span><br><span class="line">            todos: todos.filter((todo, i) =&gt; i !== payload),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">        // return default value while app start</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// store.js</span><br><span class="line">// with persistence support</span><br><span class="line">export default function configureStore() &#123;</span><br><span class="line"></span><br><span class="line">    const persistedReducer = persistReducer(persistConfig, _reducer)</span><br><span class="line"></span><br><span class="line">    const store = createStore(persistedReducer);</span><br><span class="line">    let persistor = persistStore(store)</span><br><span class="line"></span><br><span class="line">    return &#123; store, persistor &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the big difference from the last post is that we use persistedReducer to create store, and a new stuff persistor created as the same time.</p><p>Remember the usage of persistor? It’s used by PersistGate component in index.js.</p><p>So, that’s the main points we need to notice in a persistenc enchanced Redux RNA. The complete source code for this app is in <a href="https://github.com/lwz7512/AwesomeProject2" target="_blank" rel="noopener">here</a>!</p><p>It can be used even in your daily life, isn’t it?</p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Last post we introduced Redux to a bla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Adding Redux to react-native project Part 1</title>
    <link href="https://lwz7512.github.io/2018/04/15/Adding-Redux-to-react-native-project-Part-1/"/>
    <id>https://lwz7512.github.io/2018/04/15/Adding-Redux-to-react-native-project-Part-1/</id>
    <published>2018-04-15T13:10:24.000Z</published>
    <updated>2018-05-09T14:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>After couples of days of learning, I believe I have understand the structure and concepts of Redux. Now it’s time to put it into practice for a real react-native project. My goal is pretty simple: integrating Redux to a react-native seed project by only ONE new source file added. In this way, everything is clear to overview and highlight the points.</p><h3 id="Boilerplate"><a href="#Boilerplate" class="headerlink" title="Boilerplate"></a>Boilerplate</h3><p>To create a blank react-native project, I prefer to choose react-native cli rather than create-react-native-app! I’d tried the create-react-native-app &amp; Expo, but I found that toolset might be problematic and inefficient to debug and restart a new dev server.</p><p>install react-native cli:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g react-native-cli</span><br></pre></td></tr></table></figure><p>create a blank react-native project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeNatiRedux</span><br></pre></td></tr></table></figure><p>then, if we run ‘react-native run-ios’ or ‘react-native run-android’, we’ll see the the Welcome screen in simulator or device(if Android device connected).</p><h3 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h3><p>Newly create react-native project code seems incompatible to Visual Studio Code 1.22.1. The editor complains the ‘Props’ only used in .ts file, so commented it and delete the <props>.</props></p><p>My cli enviroment is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ react-native -v</span><br><span class="line">react-native-cli: 2.0.1</span><br><span class="line">react-native: 0.55.2</span><br></pre></td></tr></table></figure><p>Opening the AwesomeNatiRedux folder in vs code, we’ll see the two source file, index.js and App.js. One is entry file, another is root Component of the application.</p><p>Then, we’ll begin to add Redux to the project step by step.</p><ul><li>Install redux dependency modules<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save redux</span><br><span class="line">$ npm install --save react-redux</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ul><p>now to test installation successful, just run: ‘react-native start’.</p><ul><li><p>Change file structure<br>To make source file more reasonable and easily manage, we put all the source files into a app directory or src directory, left only index.js in the root of project. So mkdir app and move App.js to app directory. Besides, the redux logic file is going to be put the app directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir app</span><br><span class="line">$ mv App.js app/</span><br></pre></td></tr></table></figure></li><li><p>Change index.js<br>adding a bootstrap component to wrap App, and replacing the originally registered App component as root component:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Add these imports - Step 1</span><br><span class="line">import App from &apos;./app/App&apos;;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123; store &#125; from &apos;./app/redux&apos;;</span><br><span class="line"></span><br><span class="line">export default class Bootstrap extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;App /&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(&apos;AwesomeNatiRedux&apos;, () =&gt; Bootstrap);</span><br></pre></td></tr></table></figure></li></ul><p>in this file, we include the redux related component, Provider, to provide App level context for App component, while it just need a store to initiate.</p><ul><li><p>Create redux.js in app directory<br>the redux.js here includes 3 parts: actions/reducers/store which are indispensable to a Redux application.<br>In index.js above, we need store to reference, so it is exported:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const store = configureStore();</span><br></pre></td></tr></table></figure></li><li><p>Refactoring the App.js<br>Why a react app need a Redux help, the answer can be very simple: to seperate or move the component level state to App level. The advantages are also obvious, easy to manage and share.<br>A modified version of App component may like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">export class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</span><br><span class="line">          &#123;this.props.welcome&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          &#123;this.props.start&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</span><br><span class="line">          &#123;this.props.instructions&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;()=&gt;this.props.eventHandlerWithParam(&apos;Payload Sent!&apos;)&#125;</span><br><span class="line">          // onPress=&#123;this.props.eventHandlerNoParam&#125;</span><br><span class="line">          title=&quot;Learn More&quot;</span><br><span class="line">          color=&quot;#841584&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Magic part:<br>Compared with the initial version of it, you’ll find that state have been replaced to props, which means properties. How to achieve this?<br>Three function: mapStateToProps, mapDispatchToProps, connect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// inject app state from redux</span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; &#123;</span><br><span class="line">  console.log(&apos;new state Got!&apos;);</span><br><span class="line">  // set properties from state</span><br><span class="line">  return &#123;</span><br><span class="line">    welcome: state.welcome,</span><br><span class="line">    start: state.start,</span><br><span class="line">    instructions: state.instructions,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// inject UI event handler from actions</span><br><span class="line">// now got property activateGeodP &amp; closeGeodP</span><br><span class="line">const mapDispatchToProps = &#123;</span><br><span class="line">  eventHandlerWithParam: activateGeodX,</span><br><span class="line">  eventHandlerNoParam: closeGeodX,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Wrap App component with Connect component,</span><br><span class="line">// and create interaction channel(props) for it.</span><br><span class="line">const AppContainer = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(App);</span><br><span class="line"></span><br><span class="line">export default AppContainer;</span><br></pre></td></tr></table></figure></li></ul><p>that’s the main refactoring process of react-native project to add Reduct support.</p><p>the complete project source code is <a href="https://github.com/lwz7512/AwesomeNatiRedux" target="_blank" rel="noopener">here</a>.</p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;After couples of days of learning, I b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Understand Reactjs and Redux - step 2</title>
    <link href="https://lwz7512.github.io/2018/04/12/Understand-Reactjs-and-Redux-step-2/"/>
    <id>https://lwz7512.github.io/2018/04/12/Understand-Reactjs-and-Redux-step-2/</id>
    <published>2018-04-12T04:00:39.000Z</published>
    <updated>2018-04-12T06:06:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Last post in step I explained the usage and principle of mapStateToProps function, also what’s meaning for mapStateToProps to state and props. In a word, it’s bridge to connect state to property used in UI template. Each time app state changed, component property changed also. So, the data flow as following:</p><blockquote><p>action –&gt; reducer –&gt; state –&gt; property –&gt; ui</p></blockquote><p>all this thanks to mapStateToProps.</p><h3 id="Snipppets"><a href="#Snipppets" class="headerlink" title="Snipppets"></a>Snipppets</h3><p>In this post, I will describe another function named <strong> <em>mapDispatchToProps</em> </strong> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Redefined version using p:x pair @2018/04/12</span><br><span class="line">// bind action callback to component property</span><br><span class="line">const mapDispatchToProps = &#123;</span><br><span class="line">  activateGeodP: activateGeodX,</span><br><span class="line">  closeGeodP: closeGeodX,</span><br><span class="line">&#125;;</span><br><span class="line">// original version:</span><br><span class="line">// const mapDispatchToProps = &#123;</span><br><span class="line">//   activateGeod,</span><br><span class="line">//   closeGeod</span><br><span class="line">// &#125;;</span><br></pre></td></tr></table></figure><p>this function also returns a map for prop: action, with this map definition, the connected component abtained two additional properties to use:</p><ul><li>activateGeodP</li><li>closeGeodP</li></ul><p>the following image can prove it:</p><p><img src="/img/react_con_with_dispatcher.png" alt=""></p><p>How does it happen? Nothing but the connect() function belowing:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Wrap App component with Connect component,</span><br><span class="line">// and create interaction channel(props) for it.</span><br><span class="line">const AppContainer = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(App);</span><br></pre></td></tr></table></figure><p>What if we do not connect this <strong> <em>mapDispatchToProps</em> </strong> to App? like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const AppContainer = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  // mapDispatchToProps</span><br><span class="line">)(App);</span><br></pre></td></tr></table></figure><p>You may have guessed the result:</p><p><img src="/img/react_con_no_dispatcher.png" alt=""></p><p>Yes, you got it! that’s how do <strong> mapStateToProps </strong> and <strong> mapDispatchToProps </strong> work with connect function!</p><p>In the next few posts, I will continue to explore other concepts and building blocks that are must to understand for even the minimal reacjs apps.</p><p>keep tuning…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Last post in step I explained the usag
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Understand Reactjs and Redux - step 1</title>
    <link href="https://lwz7512.github.io/2018/04/11/Understand-Reactjs-and-Redux-step-1/"/>
    <id>https://lwz7512.github.io/2018/04/11/Understand-Reactjs-and-Redux-step-1/</id>
    <published>2018-04-11T15:01:47.000Z</published>
    <updated>2018-04-12T05:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Learning curve of reacjs &amp; redux is absolutely steep, event for me, a senior front end programmar with years of experience. After a number of days of reading related official docs and examples officially recommended, I still feel frustrated and confused about those of conscepts and thoughts.</p><p>Then I met the minimal redux and even more simpler project to show how it could be. That helped me a lot to understand the usages and working flow in it.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><p><a href="https://redux-minimal.js.org/" target="_blank" rel="noopener">Minimal redux</a></p></li><li><p><a href="http://blog.tylerbuchea.com/super-simple-react-redux-application-example/" target="_blank" rel="noopener">Super Simple React Redux Example</a></p></li></ul><p>as well as the forked version of Super Simple React Redux Example, added with my comments in each function/concept.</p><ul><li><a href="https://github.com/lwz7512/my-simple-app" target="_blank" rel="noopener">My Simple React &amp; Redux App</a></li></ul><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>The most mysterious part in reactjs-redux for me is how do ACTION &amp; REDUCER cooperate to produce STATE &amp; PROPS change. So, I manage to figure something out there:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// AppContainer.js</span><br><span class="line">// reducer -&gt; state -&gt; props</span><br><span class="line">const mapStateToProps = (state, ownProps) =&gt; &#123;</span><br><span class="line">  console.log(state);</span><br><span class="line">  // set geodP used in template above</span><br><span class="line">  return &#123;geodP: state.geodR&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>this mapStateToProps function is common in redux, it accepts the state transfered from reducer function and produce the props object needed by ui element.</p><p>I modified the varaibles names, for example:</p><ul><li>Prop suffixed by capital character P.</li><li>state value suffixed by capital character R means it is from reducers.</li></ul><p>May be these are meaningless for a skilled reactjs coder, but currently it helped me to clearly identify the category of each stuff.</p><p>then another question came, where is the geodR in state from?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// redux.js</span><br><span class="line">// state producer &amp; exposer</span><br><span class="line">export const reducers = combineReducers(&#123;</span><br><span class="line">  // original: not easy to understand for beginner</span><br><span class="line">  // geod,</span><br><span class="line"></span><br><span class="line">  // redefined: expose geodR property for state using _geodR</span><br><span class="line">  geodR: _geodR,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The anwser lies in reducers! It added a property called geodR to state and calculated the value by underscore prefixed geodR function for inner use. I believe this refactor is readability is better than the original version.</p><p>More understanding and clarification in code practice comming soon…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Learning curve of reacjs &amp;amp; redux i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>running react-native app in browser</title>
    <link href="https://lwz7512.github.io/2018/04/08/running-react-native-app-in-browser/"/>
    <id>https://lwz7512.github.io/2018/04/08/running-react-native-app-in-browser/</id>
    <published>2018-04-08T13:28:46.000Z</published>
    <updated>2018-04-08T14:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>RNA created by create-react-native-app command have great advantages in running on both iOS and Android platform, using the the same code infrastructure. Compared with native development process, the whole dev-lifecycle shorten greatly because of no-need of complete compilation, and hot deploy in device/simulator.</p><p>But these build process, based on packager and running on Expo client, looks like not satisfied and not much efficient as pure reactJS web development workflow. The FAMOUS problem is the <strong> Starting packager… </strong> bug in ‘react-native-scripts’. It exists for more than half a year, and no further fix promoted. Besides, when the js file changed the device/simulator cannot update instantly and timely to see the new result, often need another modification to invoke hot deploy. It’s frustrated.</p><p>So, I need a web solution to run react-native code in browser, and seeing the change result instantly and timely is a must. Then I found the <strong> <a href="https://github.com/taobaofed/react-web" target="_blank" rel="noopener">React Web</a> </strong> .</p><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><ul><li>first, create a blank reactjs project:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br><span class="line">$ create-react-app my-react-app</span><br></pre></td></tr></table></figure><ul><li>then, install React Web</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-react-app</span><br><span class="line">$ npm install --save react-web</span><br></pre></td></tr></table></figure><ul><li>reinstall installed modules</li></ul><p>If running ‘npm start’ in last step, react-scripts error would occur.<br>so, remove all the installed modules then install again:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf node_modules</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ul><li>modify the index.js &amp; App.js</li></ul><p>Booting react-native component is slightly different from web, so, the index.js should make some changes:</p><p>index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// add this</span><br><span class="line">import &#123;AppRegistry, Platform&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">// comment this two lines used for web merely</span><br><span class="line">// ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;));</span><br><span class="line">// registerServiceWorker();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// also add these boot method used by native component</span><br><span class="line">AppRegistry.registerComponent(&apos;App&apos;, () =&gt; App);</span><br><span class="line"></span><br><span class="line">if (Platform.OS === &apos;web&apos;) &#123;</span><br><span class="line">  AppRegistry.runApplication(&apos;App&apos;, &#123; rootTag: document.getElementById(&apos;root&apos;) &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js:</p><p>comment all the code originally used, then add below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;AppRegistry, StyleSheet, Text, View, Platform&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.box&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.text&#125;&gt;Hello, world!&lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  box: &#123;padding: 10&#125;,</span><br><span class="line">  text: &#123;fontWeight: &apos;bold&apos;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><ul><li>now, it’s time to start</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>the browser reopened localhost at port 3000, Hello world! successfully showed in screen. Made a change in App.js, then switch to browser, new result refreshed instantly.</p><p>That’s my desired and familiar way!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;RNA created by create-react-native-app
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>stuck at Starting packager...</title>
    <link href="https://lwz7512.github.io/2018/04/06/stuck-at-Starting-packager/"/>
    <id>https://lwz7512.github.io/2018/04/06/stuck-at-Starting-packager/</id>
    <published>2018-04-06T13:54:23.000Z</published>
    <updated>2018-04-07T15:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I started to learn react-native app development from zero. Reactjs/react-native has emerging for couples of years, and growing to a very big and mature ecosystem. I had given a glimpse to it, but can not be accustomed with JSX way to mingle script/template/style into one file. As an AngularJS/Ionic developer for almost 4 years, I gradually realized the limitation of the Ionic/Cordova approach. So, I began to step into reactive world this year.</p><p>After several days of official reactjs/react-native documentation reading, I start to create my first react-native app. Things changed a lot since the first publish of react-native, now it recommends to use <strong> create-react-native-app </strong> to start a RNA.</p><ul><li>install create-react-native-app globally</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-native-app</span><br></pre></td></tr></table></figure><ul><li>create rn-app with create-react-native-app cli</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-native-app rn-my-app</span><br></pre></td></tr></table></figure><ul><li><p>install Expo client in mobile phone to preview your RNA</p><p><a href="https://expo.io/tools" target="_blank" rel="noopener">Expo official site</a></p></li><li><p>enter app dir and start dev server</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd rn-my-app</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>less than 20 seconds, you will the the following the output in console:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> &gt; rn-my-app@0.1.0 start /Users/username/mobile/rn-my-app</span><br><span class="line"> &gt; react-native-scripts start</span><br><span class="line"></span><br><span class="line"> 22:40:00: Starting packager...</span><br><span class="line"> Packager started!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A BIG QR CODE IMAGE HERE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Your app is now running at URL: exp://192.168.1.103:19000</span><br><span class="line"></span><br><span class="line"> View your app with live reloading:</span><br><span class="line"></span><br><span class="line">   Android device:</span><br><span class="line">     -&gt; Point the Expo app to the QR code above.</span><br><span class="line">        (You&apos;ll find the QR scanner on the Projects tab of the app.)</span><br><span class="line">   iOS device:</span><br><span class="line">     -&gt; Press s to email/text the app URL to your phone.</span><br><span class="line">   Emulator:</span><br><span class="line">     -&gt; Press a (Android) or i (iOS) to start an emulator.</span><br><span class="line"></span><br><span class="line"> Your phone will need to be on the same local network as this computer.</span><br><span class="line"> For links to install the Expo app, please visit https://expo.io.</span><br><span class="line"></span><br><span class="line"> Logs from serving your app will appear here. Press Ctrl+C at any time to stop.</span><br><span class="line"></span><br><span class="line">  › Press a to open Android device or emulator, or i to open iOS emulator.</span><br><span class="line">  › Press s to send the app URL to your phone number or email address</span><br><span class="line">  › Press q to display QR code.</span><br><span class="line">  › Press r to restart packager, or R to restart packager and clear cache.</span><br><span class="line">  › Press d to toggle development mode. (current mode: development)</span><br></pre></td></tr></table></figure><p>I tried to use Expo app installed in my Android mobile to scan the QR code, but nothing happened. Then I press <code>a</code> in console, the application showed in screen(my Mac connected to mobile by usb cable).</p><p>To see the modified result of the app, just made some changes in App.js then waiting for rebuilding process and new content will present in the screen.</p><p>It looks like easy and smooth, everything is OK until I press Ctrl+c to shutdown the dev server.</p><blockquote><p>When I attempted to restart the packager by <strong> npm start –reset-cache </strong> , it stopped in Starting packager…</p></blockquote><p>even waited for couples of minutes, NO further progress AT ALL!!!</p><p>Then ctrl+c an restart again repeatedly and repeatedly… no changes.</p><p>…</p><p>It made me almost crazy for this, the build server can’t start again and development process stopped there also. So, there is no choice but to turn to search engine, finally, I found the post:</p><blockquote><p>Stuck in “Starting packager”</p></blockquote><blockquote><p><a href="https://github.com/react-community/create-react-native-app/issues/203" target="_blank" rel="noopener">https://github.com/react-community/create-react-native-app/issues/203</a></p></blockquote><p>and this:</p><blockquote><p>react-native-scripts start stuck at “Starting packager…”</p></blockquote><blockquote><p><a href="https://github.com/react-community/create-react-native-app/issues/343" target="_blank" rel="noopener">https://github.com/react-community/create-react-native-app/issues/343</a></p></blockquote><p>The key solution is the watchman tool to kill all the file monitor process, then would be successful restart.</p><p>so, install watchman first:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install watchman</span><br></pre></td></tr></table></figure><p>then, executing the watchman delete &amp; shutdown command, console print the clear result:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> [username@~] $ watchman watch-del-all &amp;&amp; watchman shutdown-server</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;4.9.0&quot;,</span><br><span class="line">    &quot;roots&quot;: [</span><br><span class="line">        &quot;/Users/username/mobile/rn-my-app&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;4.9.0&quot;,</span><br><span class="line">    &quot;shutdown-server&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> last, executing the restart command in app root:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liwenzhi@~/mobile/rn-my-app] $ npm start --reset-cache</span><br></pre></td></tr></table></figure><p>14 seconds later, the Packager started!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I started to learn react-native app development from zero. Reactjs/react-native has emerging for couples of years, and growing t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex box vs grid layout in implementation of image card</title>
    <link href="https://lwz7512.github.io/2018/03/28/flex-box-vs-grid-layout-in-implementation-of-image-card/"/>
    <id>https://lwz7512.github.io/2018/03/28/flex-box-vs-grid-layout-in-implementation-of-image-card/</id>
    <published>2018-03-28T00:52:15.000Z</published>
    <updated>2018-03-28T03:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Html element layout process seems to be simple for a trained coder, the same as a skilled front-end coder, just a piece of cake. But the fact is that even to me, working with javascript/html/css for many years occasionally lost in how to center an image with equal margin.</p><p>Below is a mini-program image card, constructed by view and css, it consumed me couples of hour to complete it…. <strong>-_-||</strong> … It’s so frustrated that I begin to doubt I’m too old to do this….</p><p><img src="/img/image_card.png" alt=""></p><p>the view structure is simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- image header card --&gt;</span><br><span class="line">&lt;view class=&quot;card&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;image-roundcorner&quot;&gt;</span><br><span class="line">    &lt;image class=&quot;header-img shadow&quot; src=&quot;../../images/card_header_img1.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;footer &quot;&gt;</span><br><span class="line">    &lt;view class=&quot;footer-title&quot;&gt;揭秘区块链系列&lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;footer-tags shadow&quot;&gt;</span><br><span class="line">      &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">      &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">      &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>The card class define the card’s size merely, 100% width and 255px height. The most confusing part is centering the header image and leave the left and the right equal margin to screen border. I had thought that just having the image container 100% with and margin: 0 10px would realize the expectation. But it turned out I’m thinking too easy. The working design ending up in this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.card .image-roundcorner &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 150px;</span><br><span class="line"></span><br><span class="line">  /* image container just define a center-ability box */</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card .header-img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line"></span><br><span class="line">  /* importantly place here to determine center &amp; LR margin */</span><br><span class="line">  margin: 0 10px;</span><br><span class="line"></span><br><span class="line">  border-top-left-radius: 10px;</span><br><span class="line">  border-top-right-radius: 10px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As for footer, to center two row text and leave equal margin, <strong>flex-direction</strong> is a must:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.card .footer &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line"></span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line"></span><br><span class="line">  /* vertically arrange the children */</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All this layout details and small techniques are not difficult or tricky for a skilled front-end coder writing them daily, but could drive someone unfamiliar  about this crazy.</p><p>Finally I compared the flex box layout method with grid layout, the result showed that css grid can greatly cut down the code amount(~10% saved), the view structure simplified as well:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- optimized image header card --&gt;</span><br><span class="line">&lt;view class=&quot;grid-card&quot;&gt;</span><br><span class="line">  &lt;image class=&quot;header-img&quot; src=&quot;../../images/card_header_img2.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;text class=&quot;footer-title&quot;&gt;谈创新你必须知道这些&lt;/text&gt;</span><br><span class="line">  &lt;view class=&quot;footer-tags shadow&quot;&gt;</span><br><span class="line">    &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">    &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">    &lt;text class=&quot;tag&quot;&gt;创新科技&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>2 view container reduced thanks for display: grid;</p><ul><li><p>first define a grid card structure with column and row:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.grid-card &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 255px;</span><br><span class="line"></span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 10px auto 10px;</span><br><span class="line">  grid-template-rows: 150px 42px 46px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>then just put the element in it directly :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.grid-card .header-img &#123;</span><br><span class="line">  grid-column: 2/3;</span><br><span class="line">  grid-row: 1/2;</span><br><span class="line"></span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 150px;</span><br><span class="line"></span><br><span class="line">  border-top-left-radius: 10px;</span><br><span class="line">  border-top-right-radius: 10px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>The total layout process are clear and under the control, it’s a big advance compared with flex box layout. So, it’s time to leap toward to css grid layout age.</p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Html element layout process seems to be simple for a trained coder, the same as a skilled front-end coder, just a piece of cake. But the 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Finally I am here</title>
    <link href="https://lwz7512.github.io/2018/03/23/Finally-I-am-here/"/>
    <id>https://lwz7512.github.io/2018/03/23/Finally-I-am-here/</id>
    <published>2018-03-23T02:34:03.000Z</published>
    <updated>2018-03-26T01:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a long time not writing something formal, especially when I went through the failure of my first startup. After years of re-adjusting in job and family, now I moved to a new city with family members and started a new life. In order to keep me make daily progress in technical and english, I setup this hexo blog, and decide to record something useful everyday.</p><p>I believe that I have much to learn in my field(Front-end/Mobile App Dev), even working on these stuff for more than 10 years, there still remains much new untouched. By reviewing the works/projects of past couples of years, I found that It’s too miserable, no success, no proud, no value…</p><p>This year, 2018, keep learning , writing blog, participating in open source projects, doing something valuable stuff, even tiny. Forget those nonsense and bullshit politics, focus on my mission, go, now!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s been a long time not writing something formal, especially when I went through the failure of my first startup. After years of re-adj
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lwz7512.github.io/2016/05/26/hello-world/"/>
    <id>https://lwz7512.github.io/2016/05/26/hello-world/</id>
    <published>2016-05-25T22:00:00.000Z</published>
    <updated>2018-03-23T02:44:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Prepare to launch…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Prepare to launch…&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Movies" scheme="https://lwz7512.github.io/tags/Movies/"/>
    
      <category term="Life" scheme="https://lwz7512.github.io/tags/Life/"/>
    
  </entry>
  
</feed>
